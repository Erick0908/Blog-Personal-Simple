'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _html_formatter = require('./html_formatter');

var _html_formatter2 = _interopRequireDefault(_html_formatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HtmlDivFormatter = function (_HtmlFormatter) {
  _inherits(HtmlDivFormatter, _HtmlFormatter);

  function HtmlDivFormatter() {
    _classCallCheck(this, HtmlDivFormatter);

    var _this = _possibleConstructorReturn(this, (HtmlDivFormatter.__proto__ || Object.getPrototypeOf(HtmlDivFormatter)).call(this));

    _this.line = '';
    return _this;
  }

  _createClass(HtmlDivFormatter, [{
    key: 'outputSong',
    value: function outputSong(song) {
      return this.div('chord-sheet', song);
    }
  }, {
    key: 'startOfSong',
    value: function startOfSong() {
      _get(HtmlDivFormatter.prototype.__proto__ || Object.getPrototypeOf(HtmlDivFormatter.prototype), 'startOfSong', this).call(this);
      this.output('<div class="chord-sheet">');
    }
  }, {
    key: 'endOfSong',
    value: function endOfSong() {
      _get(HtmlDivFormatter.prototype.__proto__ || Object.getPrototypeOf(HtmlDivFormatter.prototype), 'endOfSong', this).call(this);
      this.output('</div>');
    }
  }, {
    key: 'outputPair',
    value: function outputPair(chords, lyrics) {
      this.line += this.column(this.chord(chords) + this.lyrics(lyrics));
    }
  }, {
    key: 'finishLine',
    value: function finishLine() {
      var row = this.row(this.line);
      this.output(row);
      this.line = '';
    }
  }, {
    key: 'chord',
    value: function chord(_chord) {
      return this.div('chord', _chord);
    }
  }, {
    key: 'lyrics',
    value: function lyrics(_lyrics) {
      return this.div('lyrics', _lyrics);
    }
  }, {
    key: 'div',
    value: function div(cssClasses, value) {
      var attr = cssClasses ? ' class="' + cssClasses + '"' : '';
      return '<div' + attr + '>' + value + '</div>';
    }
  }, {
    key: 'column',
    value: function column(contents) {
      return this.div('column', contents);
    }
  }, {
    key: 'row',
    value: function row(contents) {
      var cssClasses = 'row';

      if (!contents) {
        cssClasses += ' empty-line';
      }

      return this.div(cssClasses, contents);
    }
  }]);

  return HtmlDivFormatter;
}(_html_formatter2.default);

exports.default = HtmlDivFormatter;