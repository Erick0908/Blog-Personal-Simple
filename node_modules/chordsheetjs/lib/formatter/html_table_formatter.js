'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _html_formatter = require('./html_formatter');

var _html_formatter2 = _interopRequireDefault(_html_formatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HtmlTableFormatter = function (_HtmlFormatter) {
  _inherits(HtmlTableFormatter, _HtmlFormatter);

  function HtmlTableFormatter() {
    _classCallCheck(this, HtmlTableFormatter);

    var _this = _possibleConstructorReturn(this, (HtmlTableFormatter.__proto__ || Object.getPrototypeOf(HtmlTableFormatter)).call(this));

    _this.chordsLine = '';
    _this.lyricsLine = '';
    return _this;
  }

  _createClass(HtmlTableFormatter, [{
    key: 'outputPair',
    value: function outputPair(chords, lyrics) {
      this.chordsLine += this.cell('chord', chords);
      this.lyricsLine += this.cell('lyrics', lyrics);
    }
  }, {
    key: 'finishLine',
    value: function finishLine() {
      var rows = this.row(this.chordsLine) + this.row(this.lyricsLine);
      this.output(this.table(rows));
      this.chordsLine = '';
      this.lyricsLine = '';
    }
  }, {
    key: 'cell',
    value: function cell(cssClass, value) {
      return '<td class="' + cssClass + '">' + value + '</td>';
    }
  }, {
    key: 'row',
    value: function row(contents) {
      var attr = contents ? '' : ' class="empty-line"';
      return '<tr' + attr + '>' + contents + '</tr>';
    }
  }, {
    key: 'table',
    value: function table(contents) {
      return '<table>' + contents + '</table>';
    }
  }]);

  return HtmlTableFormatter;
}(_html_formatter2.default);

exports.default = HtmlTableFormatter;