'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _formatter_base = require('./formatter_base');

var _formatter_base2 = _interopRequireDefault(_formatter_base);

var _tag = require('../chord_sheet/tag');

var _tag2 = _interopRequireDefault(_tag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SPACE = '&nbsp;';

var HtmlFormatter = function (_FormatterBase) {
  _inherits(HtmlFormatter, _FormatterBase);

  function HtmlFormatter() {
    _classCallCheck(this, HtmlFormatter);

    var _this = _possibleConstructorReturn(this, (HtmlFormatter.__proto__ || Object.getPrototypeOf(HtmlFormatter)).call(this));

    _this.dirtyLine = false;
    _this.lineEmpty = true;
    return _this;
  }

  _createClass(HtmlFormatter, [{
    key: 'formatItem',
    value: function formatItem(item) {
      if (item instanceof _tag2.default) {
        return;
      }

      var chords = item.chords.trim();
      var lyrics = item.lyrics.trim();

      if (chords.length || lyrics.length) {
        if (chords.length > lyrics.length) {
          chords += SPACE;
        } else if (lyrics.length > chords.length) {
          lyrics += SPACE;
        }

        this.outputPair(chords, lyrics);
      }

      this.dirtyLine = true;
    }
  }, {
    key: 'formatMetaData',
    value: function formatMetaData(song) {
      if (song.title) {
        this.output('<h1>' + song.title + '</h1>');
      }

      if (song.subtitle) {
        this.output('<h2>' + song.subtitle + '</h2>');
      }
    }
  }, {
    key: 'newLine',
    value: function newLine() {
      if (this.dirtyLine) {
        this.finishLine();
      }
    }
  }, {
    key: 'endOfSong',
    value: function endOfSong() {
      if (this.dirtyLine) {
        this.finishLine();
      }
    }
  }]);

  return HtmlFormatter;
}(_formatter_base2.default);

exports.default = HtmlFormatter;